definitions:
  errs.AlreadyExistsError:
    properties:
      code:
        example: ALREADY_EXISTS
        type: string
      message:
        example: User already exists.
        type: string
      status:
        example: 409
        type: integer
    type: object
  errs.AppError:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
      status:
        type: integer
    type: object
  errs.AuthError:
    properties:
      code:
        example: AUTH_FAILED
        type: string
      message:
        example: Failded authorize user.
        type: string
      status:
        example: 400
        type: integer
    type: object
  errs.IncorrectPasswordError:
    properties:
      code:
        example: INCORRECT_PASSWORD
        type: string
      message:
        example: Incorrect password.
        type: string
      status:
        example: 401
        type: integer
    type: object
  errs.UserNotFoundError:
    properties:
      code:
        example: USER_NOT_FOUND
        type: string
      message:
        example: User not found.
        type: string
      status:
        example: 400
        type: integer
    type: object
  errs.ValidationFailedError:
    properties:
      code:
        example: VALIDATION
        type: string
      message:
        example: Validation error.
        type: string
      status:
        example: 422
        type: integer
    type: object
  req.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  req.RegisterUserRequest:
    properties:
      email:
        type: string
      name:
        minLength: 3
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  res.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/errs.AppError'
      success:
        example: false
        type: boolean
    type: object
  res.SuccessResponse:
    properties:
      success:
        example: true
        type: boolean
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/req.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.IncorrectPasswordError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.UserNotFoundError'
              type: object
        "422":
          description: Unprocessable Entity
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.ValidationFailedError'
              type: object
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.AuthError'
              type: object
      summary: User logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/req.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.AppError'
              type: object
        "409":
          description: Conflict
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.AlreadyExistsError'
              type: object
        "422":
          description: Unprocessable Entity
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.ValidationFailedError'
              type: object
      summary: User register
      tags:
      - auth
swagger: "2.0"
