definitions:
  errs.AlreadyExistsError:
    properties:
      code:
        example: ALREADY_EXISTS
        type: string
      message:
        example: User already exists.
        type: string
      status:
        example: 409
        type: integer
    type: object
  errs.AppError:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
      status:
        type: integer
    type: object
  errs.AuthError:
    properties:
      code:
        example: AUTH_FAILED
        type: string
      message:
        example: Failded authorize user.
        type: string
      status:
        example: 400
        type: integer
    type: object
  errs.BadRequestError:
    properties:
      code:
        example: BAD_REQUEST
        type: string
      message:
        example: Bad request.
        type: string
      status:
        example: 400
        type: integer
    type: object
  errs.ForbiddenError:
    properties:
      code:
        example: FORBIDDEN
        type: string
      message:
        example: Forbidden.
        type: string
      status:
        example: 403
        type: integer
    type: object
  errs.IncorrectPasswordError:
    properties:
      code:
        example: INCORRECT_PASSWORD
        type: string
      message:
        example: Incorrect password.
        type: string
      status:
        example: 401
        type: integer
    type: object
  errs.UserNotFoundError:
    properties:
      code:
        example: USER_NOT_FOUND
        type: string
      message:
        example: User not found.
        type: string
      status:
        example: 400
        type: integer
    type: object
  errs.ValidationFailedError:
    properties:
      code:
        example: VALIDATION
        type: string
      message:
        example: Validation error.
        type: string
      status:
        example: 422
        type: integer
    type: object
  project_dto.ProjectDto:
    properties:
      description:
        example: test description
        type: string
      id:
        example: 1
        type: integer
      name:
        example: test
        type: string
      slug:
        example: test
        type: string
    type: object
  req.CreateProjectRequest:
    properties:
      description:
        type: string
      name:
        minLength: 3
        type: string
      slug:
        minLength: 3
        type: string
    required:
    - name
    - slug
    type: object
  req.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  req.RegisterUserRequest:
    properties:
      email:
        type: string
      fullname:
        minLength: 3
        type: string
      password:
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - fullname
    - password
    type: object
  res.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/errs.AppError'
      success:
        example: false
        type: boolean
    type: object
  res.SuccessResponse:
    properties:
      success:
        example: true
        type: boolean
    type: object
  res.SuccessWithDataResponse:
    properties:
      data: {}
      success:
        example: true
        type: boolean
    type: object
  res.UserProjectResponse:
    properties:
      project:
        $ref: '#/definitions/project_dto.ProjectDto'
    type: object
  res.UserProjectsResponse:
    properties:
      projects:
        items:
          $ref: '#/definitions/project_dto.ProjectDto'
        type: array
    type: object
  res.UserResponse:
    properties:
      email:
        example: john@john.com
        type: string
      fullName:
        example: John
        type: string
      id:
        example: 1
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/req.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.IncorrectPasswordError'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.UserNotFoundError'
              type: object
        "422":
          description: Unprocessable Entity
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.ValidationFailedError'
              type: object
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.AuthError'
              type: object
      summary: User logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/req.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.SuccessResponse'
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.AppError'
              type: object
        "409":
          description: Conflict
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.AlreadyExistsError'
              type: object
        "422":
          description: Unprocessable Entity
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.ValidationFailedError'
              type: object
      summary: User register
      tags:
      - auth
  /user:
    get:
      consumes:
      - application/json
      description: AuthenticatedUser
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/res.SuccessWithDataResponse'
            - properties:
                data:
                  $ref: '#/definitions/res.UserResponse'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.ForbiddenError'
              type: object
      summary: User
      tags:
      - user
  /user/project:
    post:
      consumes:
      - application/json
      description: Create Project
      parameters:
      - description: Create project request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/req.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/res.SuccessWithDataResponse'
            - properties:
                data:
                  $ref: '#/definitions/res.UserProjectResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.BadRequestError'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.ForbiddenError'
              type: object
        "422":
          description: Unprocessable Entity
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.ValidationFailedError'
              type: object
      summary: Create Project
      tags:
      - user
  /user/projects:
    get:
      consumes:
      - application/json
      description: UserProjects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/res.SuccessWithDataResponse'
            - properties:
                data:
                  $ref: '#/definitions/res.UserProjectsResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.BadRequestError'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/res.ErrorResponse'
            - properties:
                error:
                  $ref: '#/definitions/errs.ForbiddenError'
              type: object
      summary: Projects
      tags:
      - user
swagger: "2.0"
